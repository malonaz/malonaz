{{- /* ################### TOPLINE VARIABLES ################### */ -}}
{{ $file := .File }}
{{ $generatedFile := .GeneratedFile }}
{{- $apiImportPathRaw := $file.GoImportPath | toString | clean | dir -}}
{{- $apiImportPath := printf "%s/%s" (trimPrefix "\"" $apiImportPathRaw) "api" -}}
{{- $dummy := replaceImportPath $file.GoImportPath $apiImportPath -}}

// Code generated by protoc-templates. DO NOT EDIT.
// source: {{ $file.GoImportPath }}
package service

import (
"context"
"fmt"

"google.golang.org/grpc/codes"
"google.golang.org/grpc/status"
)

{{- range $service := $file.Services }}
	  {{- $hasListResources := false }}
	  {{- range $method := $service.Methods }}
		    {{- if eq $method.GoName "ListResources" }}
			      {{- $hasListResources = true }}
		    {{- end }}
	  {{- end }}

	  {{- if $hasListResources }}
        // GetResource retrieves a single resource based on the ListResources method
        func (s *Service) GetResource(ctx context.Context, request *pb.GetResourceRequest) (*pb.Resource, error) {
	      listResourcesRequest := &pb.ListResourcesRequest{
		    Filter: fmt.Sprintf(`id="%s"`, request.ResourceId),
	      }
	      listResourcesResponse, err := s.ListResources(ctx, listResourcesRequest)
	      if err != nil {
		    return nil, err
	      }
	      if len(listResourcesResponse.Resources) != 1 {
		    return nil, status.Errorf(codes.NotFound, "could not find resource")
	      }
	      return listResourcesResponse.Resources[0], nil
        }
	  {{- end }}
{{- end }}
