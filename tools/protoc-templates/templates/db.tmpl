{{- /* ################### TOPLINE VARIABLES ################### */ -}}
{{ $file := .File }}
{{ $generatedFile := .GeneratedFile }}
{{- $apiImportPathRaw := $file.GoImportPath | toString | clean | dir -}}
{{- $apiImportPath := printf "%s/%s" (trimPrefix "\"" $apiImportPathRaw) "api" -}}
{{- $dummy := replaceImportPath $file.GoImportPath $apiImportPath -}}
{{- $baseDir := trimPrefix "\"" $apiImportPathRaw }}
{{- $baseDir := dir $baseDir }}
{{- $modelImportPath := printf "%s/%s" $baseDir "model" -}}

// Code generated by protoc-templates. DO NOT EDIT.
// source: {{ $file.GoImportPath }}
package {{ $file.GoPackageName }}

import (
	"context"
	"fmt"
	"strings"

	"github.com/jackc/pgx/v5"

	"{{ $modelImportPath }}"
	"github.com/malonaz/core/go/postgres"
)


// DB is this service's db layer.
type DB struct {
	client *postgres.Client
}

// New returns a new db.
func New(client *postgres.Client) *DB {
	return &DB{client: client}
}

{{/* ################### TYPE DEFINITIONS ################### */}}
{{ "" }}
{{ range $message := $file.Messages -}}
    {{-  $modelOpts := (getExt .Desc "codegen.model.v1.model_opts") -}}
		{{- if not $modelOpts.Generate -}}{{ continue }}{{- end }}

		{{ $goName := untitle $message.GoIdent.GoName }}
		{{ $tableName := ternary (snakecase $goName) $modelOpts.TableName (empty $modelOpts.TableName) }}

		{{/* ################### INSERT ################### */}}
		{{- if not $modelOpts.SkipInsertFunction -}}
    const sqlInsert{{ $message.GoIdent.GoName }} = `INSERT INTO {{ $tableName }} %s VALUES %s ON CONFLICT(id) DO NOTHING`
		func (db *DB) Insert{{ $message.GoIdent.GoName }}(ctx context.Context,  {{ $goName }} *model.{{ $message.GoIdent.GoName }}) (bool, error) {
				 query, params := postgres.InsertQuery(sqlInsert{{ $message.GoIdent.GoName }}, {{ $goName }})
				 result, err := db.client.Exec(ctx, query, params...)
				 if err != nil {
				 		return false, err
				 }
				 return result.RowsAffected() == 1, nil
		}
    {{- end }}

		{{/* ################### UPDATE ################### */}}
    const sqlUpdate{{ $message.GoIdent.GoName }} = `INSERT INTO {{ $tableName }} %s VALUES %s ON CONFLICT(id) DO UPDATE SET #update_clause#`
		func (db *DB) Update{{ $message.GoIdent.GoName }}(ctx context.Context,  {{ $goName }} *model.{{ $message.GoIdent.GoName }}, updateClause string) (bool, error) {
		     query := strings.ReplaceAll(sqlUpdate{{ $message.GoIdent.GoName }}, "#update_clause#", updateClause)
				 query, params := postgres.InsertQuery(query, {{ $goName }})
				 result, err := db.client.Exec(ctx, query, params...)
				 if err != nil {
				 		return false, err
				 }
				 return result.RowsAffected() == 1, nil
		}

		{{/* ################### DELETE ################### */}}
		{{- if not $modelOpts.SkipDeleteFunction -}}
		{{ $softDeletable := $modelOpts.SoftDeletable }}
    const sqlDelete{{ $message.GoIdent.GoName }} = `DELETE FROM {{ $tableName }} WHERE id = $1`
		func (db *DB) Delete{{ $message.GoIdent.GoName }}(ctx context.Context,  {{ $goName }}ID string) error {
				 query := sqlDelete{{ $message.GoIdent.GoName }}
				 _, err  := db.client.Exec(ctx, query, {{ $goName }}ID)
				 return err
		}
		{{ end }}

		{{/* ################### LIST ################### */}}
		func (db *DB) List{{ $message.GoIdent.GoName }}s(ctx context.Context, whereClause, orderByClause, paginationClause string, columns []string, params ...any) ([]*model.{{ $message.GoIdent.GoName }}, error) {
		     if columns == nil {
				   columns = model.{{ $message.GoIdent.GoName }}Columns
				 }
		     var {{ $goName }}s []*model.{{ $message.GoIdent.GoName }}
				 query := strings.ReplaceAll("SELECT %s FROM {{ $tableName }} #where# #orderby# #pagination#", "#where#", whereClause)
				 query = strings.ReplaceAll(query, "#orderby#", orderByClause)
				 query = strings.ReplaceAll(query, "#pagination#", paginationClause)
				 query = postgres.SelectQuery(query, columns)
				 transactionFN := func(tx postgres.Tx) error {
				   {{ $goName }}s = nil
				   rows, err := tx.Query(ctx, query, params...)
				   if err != nil {
				 		  if err == pgx.ErrNoRows {
							  return nil
						  }
					    return fmt.Errorf("selecting {{ $goName }}s: %w", err)
				   }
				   {{ $goName }}s, err = pgx.CollectRows(rows, pgx.RowToAddrOfStructByNameLax[model.{{ $message.GoIdent.GoName }}])
				   if err != nil {
				 		 return fmt.Errorf("collecting rows: %w", err)
				   }
				   return nil
				}
      	return {{ $goName }}s, db.client.ExecuteTransaction(ctx, postgres.RepeatableRead, transactionFN)
	  }
{{ end -}}
