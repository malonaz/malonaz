{{- /* ################### TOPLINE VARIABLES ################### */ -}}
{{ $file := .File }}
{{ $files := .Files }}
{{ $generatedFile := .GeneratedFile }}

{{- $l := splitList "." (toString $file.Desc.FullName) -}}
{{ $packageName := index $l (sub (len $l) 2) }}

{{- $apiImportPathRaw := $file.GoImportPath | toString | clean | dir -}}
{{- $apiImportPath := printf "%s/%s" (trimPrefix "\"" $apiImportPathRaw) $packageName -}}
{{- $dummy := replaceImportPath $file.GoImportPath $apiImportPath -}}

{{- $requireAuthorizationClient := false -}}
{{- range $service := $file.Services -}}
    {{- range $method := $service.Methods }}
        {{- $methodOpts := getExt $method.Desc "codegen.admin_api.v1.method_opts" -}}
        {{- if $methodOpts.CustomHandler }}{{ continue }}{{ end -}}
        {{- $tx := $methodOpts.Transaction -}}
        {{- if and (not (empty $tx)) (or $tx.Custom (not (empty $tx.Type))) -}}
            {{- $requireAuthorizationClient = true -}}
        {{- end -}}
    {{- end -}}
{{- end -}}

{{- /* ################### HELPER TEMPLATES ################### */ -}}
{{- define "pipeStreamFn" -}}
pipeStream := func() error {
       stream, err := h.{{ untitle .Service.GoName }}Client.{{ .Method.GoName }}(srv.Context(), request)
       if err != nil {
           return err
       }

       for {
           select {
           case <-srv.Context().Done():
               return nil
           case <-stream.Context().Done():
               return stream.Context().Err()
           default:
           }

           response, err := stream.Recv()
           if err != nil {
               if err == {{ fqn "io" "EOF" }} {
                   break
               }
               return err
           }

           if err := srv.Send(response); err != nil {
               return err
           }
       }
       return nil
}
{{- end -}}

{{- define "authorize" -}}
   // Debit the user.
   ctxEscalated := {{ fqn "admin/admin_api/authentication" "MustEscalateToAdmin" }}(ctx)
   transactionType := {{ if .Tx.Custom }}txType{{ .Method.GoName}}(request){{ else }}{{ fqn "economy/proto/api" (printf "TransactionType_%s" .Tx.Type) }}{{ end }}
   {{ if .Tx.Custom -}}
      if transactionType == 0 {
         return {{ if .Tx.Optional }}h.{{ untitle .Service.GoName }}Client.{{ .Method.GoName }}(ctx, request){{ else }}{{ if .Tx.Optional }}nil, {{ end }}{{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "Internal" }}, "cannot use undefined transaction type") {{ end }}
      }
   {{ end }}
   opts := []{{ fqn "economy/authorization" "Option" }}{
       {{ if .Tx.ChatId }}{{ fqn "economy/authorization" "WithChatID" }}(request.ChatId),{{ end }}
   }
   refund, err := h.authorizationClient.Authorize(ctxEscalated, transactionType, session.UserId, opts...)
   if err != nil {
       return {{ if not .Method.Desc.IsStreamingServer }}nil, {{ end }}err
   }
{{- end -}}

{{- /* ################### CODE START ################### */ -}}
// Code generated by protoc-templates. DO NOT EDIT.
// source: {{ $file.GoImportPath }}
package {{ $packageName }}

import (
    "context"

    "github.com/malonaz/core/go/logging"
)

var log = logging.NewLogger()

{{- $handlerType := printf "%sHandler" (title $packageName) -}}

{{- $methodToService := dict }}
{{- $serviceNameToFile := dict }}
{{- range $otherFile := $.Files -}}
    {{- range $otherService := $otherFile.Services -}}
        {{- $_ := set $serviceNameToFile  (printf "%s" $otherService.Desc.FullName) $otherFile }}
        {{- range $otherMethod := $otherService.Methods -}}
            {{- $key := printf "%s/%s" $otherMethod.Input.GoIdent $otherMethod.Output.GoIdent -}}
            {{- $_ := set $methodToService $key $otherService -}}
        {{- end -}}
    {{- end -}}
{{- end -}}

{{- $set := dict }}
{{- $methodKeys := sortAlpha (keys $methodToService) }}
{{- $services := list }}
{{- range $key := $methodKeys }}
    {{- $service := (get $methodToService $key) -}}
    {{- if hasKey $set $service.GoName }}{{ continue }}{{ end -}}
    {{- $_ := set $set $service.GoName "t" }}
    {{- $services = append $services $service }}
{{- end  }}

type {{ $handlerType }} struct {
    ctxAdmin context.Context
    {{ range $service := $services }}
        {{- $file :=  (get $serviceNameToFile (printf "%s" $service.Desc.FullName)) -}}
        {{ untitle $service.GoName }}Client {{ qualifiedGoIdent (goIdent $service.GoName $file.GoImportPath) }}Client
    {{ end }}
    {{ if $requireAuthorizationClient }}authorizationClient *authorization.Client{{ end }}
}

func New{{ $handlerType }}(
    ctxAdmin context.Context,
    {{ range $service := $services }}
        {{- $file :=  (get $serviceNameToFile (printf "%s" $service.Desc.FullName)) -}}
        {{ untitle $service.GoName }}Client {{ qualifiedGoIdent (goIdent $service.GoName $file.GoImportPath) }}Client,
    {{ end }}
    {{ if $requireAuthorizationClient }}authorizationClient *authorization.Client,{{ end }}
) *{{ $handlerType }} {
    return &{{ $handlerType }}{
        ctxAdmin: ctxAdmin,
        {{ range $service := $services }}
            {{- untitle $service.GoName }}Client: {{ untitle $service.GoName }}Client,
        {{ end }}
        {{ if $requireAuthorizationClient }}authorizationClient: authorizationClient,{{ end }}
    }
}

{{ range $service := $file.Services }}
    {{- range $method := $service.Methods }}
        {{ $methodOpts := getExt $method.Desc "codegen.admin_api.v1.method_opts" }}
        {{ if $methodOpts.CustomHandler }}{{ continue }}{{ end }}
        {{- $key := printf "%s/%s" $method.Input.GoIdent $method.Output.GoIdent -}}
        {{ $otherService := get $methodToService $key }}

        {{- if $method.Desc.IsStreamingServer }}
            func (h *{{ $handlerType }}) {{ $method.GoName }}(request *{{ qualifiedGoIdent $method.Input.GoIdent }}, srv {{ qualifiedGoIdent (goIdent $service.GoName $file.GoImportPath) }}_{{ $method.GoName }}Server) error {
                    {{ $tx := $methodOpts.Transaction }}
                    {{ template "pipeStreamFn" ( dict "Service" $otherService "Method" $method) }}
                    {{ if (empty $methodOpts.Transaction) -}}
                    return pipeStream()
                    {{ else }}
                    {{- if eq (empty $tx.Type) (not $tx.Custom) }}{{ fail "transaction_type xor custom field must be set" }}{{ end -}}
                    ctx := srv.Context()
                    session := {{ fqn "admin/admin_api/authentication" "MustGetSession" }}(ctx)
                    if session.Admin {
                        return pipeStream()
                    }

                    {{ template "authorize" (dict "Service" $otherService "Method" $method "Tx" $tx) }}
                    err = pipeStream()
                    if err != nil {
                       if refundErr := refund(); refundErr != nil {
                          log.Errorf("refunding user: %v", refundErr)
                       }
                    }
                    return err
                    {{ end }}
        }

        {{- else if not $method.Desc.IsStreamingClient }}
            func (h *{{ $handlerType }}) {{ $method.GoName }}(ctx context.Context, request *{{ qualifiedGoIdent $method.Input.GoIdent }}) (*{{ qualifiedGoIdent $method.Output.GoIdent }}, error) {
                {{ if (empty $methodOpts.Transaction) -}}
                    return h.{{ untitle $otherService.GoName }}Client.{{ $method.GoName }}(ctx, request)
                {{ else -}}
                    {{ $tx := $methodOpts.Transaction }}
                    {{- if eq (empty $tx.Type) (not $tx.Custom) }}{{ fail "transaction_type xor custom field must be set" }}{{ end -}}

                    session := {{ fqn "admin/admin_api/authentication" "MustGetSession" }}(ctx)
                    if session.Admin {
                        return h.{{ untitle $otherService.GoName }}Client.{{ $method.GoName }}(ctx, request)
                    }
                    {{ template "authorize" (dict "Service" $otherService "Method" $method "Tx" $tx) }}

                    response, err := h.{{ untitle $otherService.GoName }}Client.{{ $method.GoName }}(ctx, request)
                    if err != nil {
                        go func() {
                            if err := refund(); err != nil {
                                log.Errorf("refunding user: %v", err)
                            }
                        }()
                        return nil, err
                    }
                    return response, nil
                {{ end -}}
            }
        {{- end }}
    {{ end }}
{{ end }}
