diff --git a/domain/wollemi/service.go b/domain/wollemi/service.go
index d9bce4d..dbfec3e 100644
--- a/domain/wollemi/service.go
+++ b/domain/wollemi/service.go
@@ -136,7 +136,6 @@ func (this *Service) ReadDir(path string) (*Directory, error) {
 
 	for _, info := range infos {
 		name := info.Name()
-
 		dir.Files[name] = info
 
 		if info.IsDir() {
@@ -255,6 +254,13 @@ func (this *Service) ParseDir(buf *bytes.Buffer, dir *Directory) *Directory {
 
 			return dir
 		}
+		if !dir.HasGoFile {
+			build.GetRules(func (rule please.Rule) {
+				if _, ok := this.config.Gofmt.CodegenRuleFormatting[rule.Kind()]; ok {
+					dir.HasGoFile = true
+				}
+			})
+		}
 
 		dir.Build = build
 	}
diff --git a/domain/wollemi/service_format.go b/domain/wollemi/service_format.go
index 331b925..f50cf84 100644
--- a/domain/wollemi/service_format.go
+++ b/domain/wollemi/service_format.go
@@ -8,6 +8,7 @@ import (
 	"runtime"
 	"sort"
 	"strings"
+	"sync"
 
 	"github.com/tcncloud/wollemi/domain/optional"
 	"github.com/tcncloud/wollemi/ports/logging"
@@ -31,6 +32,19 @@ func newGoFormat(paths []string) *goFormat {
 	}
 }
 
+func (gf *goFormat) IsGoRoot(path string, checkIfGoRoot func(string) bool) bool {
+	gf.mutex.RLock()
+	goroot, ok := gf.isGoroot[path]
+	gf.mutex.RUnlock()
+	if !ok {
+		goroot = checkIfGoRoot(path)
+		gf.mutex.Lock()
+		gf.isGoroot[path] = goroot
+		gf.mutex.Unlock()
+	}
+	return goroot
+}
+
 // goFormat contains all the state for formatting go rules i.e. the import path to target mapping, and the rules in the
 // targeted Please packages.
 type goFormat struct {
@@ -52,8 +66,10 @@ type goFormat struct {
 	// internal is a map of this projects imports paths to targets
 	internal map[string]string
 
-	// genfiles contain a map of generated files added via go_copy() to their build targets
+	// genfiles contain a map of generated files added via wollemi_go_file() to their build targets
 	genfiles map[string]string
+
+	mutex sync.RWMutex
 }
 
 // getTarget gets the target for an import path or generated file
@@ -181,20 +197,11 @@ func (this *Service) parsePaths() error {
 				} {
 				Imports:
 					for _, godep := range imports {
-						goroot, ok := this.goFormat.isGoroot[godep]
-
-						if !ok {
-							goroot = this.golang.IsGoroot(godep)
-
-							this.goFormat.isGoroot[godep] = goroot
-						}
-
-						if goroot {
+						path := godep
+						if this.goFormat.IsGoRoot(path, this.golang.IsGoroot) {
 							continue
 						}
 
-						path := godep
-
 						if this.isInternal(path) {
 							path = strings.TrimPrefix(path, this.gopkg+"/")
 						} else {
@@ -316,9 +323,11 @@ func (this *Service) parsePaths() error {
 					case kind != "go_test":
 						this.goFormat.internal[filepath.Join(this.gopkg, path)] = "//" + target
 
-						if kind == "go_copy" {
-							this.goFormat.genfiles[path+".cp.go"] = target
+						if formatting, ok := this.config.Gofmt.CodegenRuleFormatting[kind]; ok {
+							filename := strings.ReplaceAll(formatting, "{{ name }}", path)
+							this.goFormat.genfiles[filename] = target
 						}
+
 					}
 				}
 			})
@@ -392,7 +401,7 @@ func (this *Service) GoFormat(config wollemi.Config, paths []string) error {
 	this.goFormat = newGoFormat(this.normalizePaths(paths))
 	defer this.goFormat.resolveLimiter.Close()
 
-	this.config = config
+	this.config = this.filesystem.Config("").Merge(config)
 
 	log := this.log.WithField("rewrite", this.config.Gofmt.GetRewrite())
 
@@ -433,7 +442,7 @@ func (this *Service) getRuleDeps(files []string, config wollemi.Config, dir *Dir
 		}
 
 		for _, path := range imports {
-			if this.goFormat.isGoroot[path] {
+			if this.goFormat.IsGoRoot(path, this.golang.IsGoroot) {
 				continue
 			}
 
@@ -504,6 +513,7 @@ func (this *Service) formatDir(log logging.Logger, dir *Directory) {
 		return
 	}
 
+
 	config := this.filesystem.Config(dir.Path).Merge(this.config)
 
 	log.WithFields(logging.Fields{
@@ -526,7 +536,7 @@ func (this *Service) formatDir(log logging.Logger, dir *Directory) {
 			managed = append(managed, rule)
 		}
 
-		consumer.Update(rule)
+		consumer.Update(this, rule)
 	})
 
 	sortManagedRules(config, managed)
@@ -632,7 +642,7 @@ ManageRules:
 				log.WithField("reason", "no source files").Warn("removed")
 
 				rule.DelAttr("srcs")
-				consumer.Update(rule)
+				consumer.Update(this, rule)
 
 				dir.Build.DelRule(rule.Name())
 
@@ -728,7 +738,7 @@ ManageRules:
 
 			log.Debug("managed")
 
-			consumer.Update(rule)
+			consumer.Update(this, rule)
 		}
 
 		break
@@ -890,7 +900,7 @@ CreateRules:
 			rule.SetAttr("deps", please.Strings(resolved...))
 		}
 
-		consumer.Update(rule)
+		consumer.Update(this, rule)
 
 		dir.Build.SetRule(rule)
 
@@ -917,7 +927,7 @@ CreateRules:
 	}
 }
 
-func getSrcFilesFromExpr(expr please.Expr, dir *Directory) []string {
+func (this *Service) getSrcFilesFromExpr(expr please.Expr, dir *Directory) []string {
 	var srcFiles []string
 
 	switch expr := expr.(type) {
@@ -931,7 +941,7 @@ func getSrcFilesFromExpr(expr please.Expr, dir *Directory) []string {
 					if target.Path == "" || target.Path == dir.Path {
 						rule := dir.Build.GetRule(target.Name)
 						if rule != nil {
-							srcFiles = append(srcFiles, getSrcFilesFromExpr(rule.Unwrap(), dir)...)
+							srcFiles = append(srcFiles, this.getSrcFilesFromExpr(rule.Unwrap(), dir)...)
 						}
 					}
 				} else {
@@ -941,8 +951,8 @@ func getSrcFilesFromExpr(expr please.Expr, dir *Directory) []string {
 		}
 	case *please.BinaryExpr:
 		if expr.Op == "+" {
-			srcFiles = append(srcFiles, getSrcFilesFromExpr(expr.X, dir)...)
-			srcFiles = append(srcFiles, getSrcFilesFromExpr(expr.Y, dir)...)
+			srcFiles = append(srcFiles, this.getSrcFilesFromExpr(expr.X, dir)...)
+			srcFiles = append(srcFiles, this.getSrcFilesFromExpr(expr.Y, dir)...)
 		}
 	case *please.CallExpr:
 		var kind string
@@ -953,13 +963,16 @@ func getSrcFilesFromExpr(expr please.Expr, dir *Directory) []string {
 		}
 
 		switch kind {
-		case "genrule":
-			outs := please.Attr(expr, "outs")
-			srcFiles = append(srcFiles, getSrcFilesFromExpr(outs, dir)...)
-		case "go_copy":
+		default:
 			if name := please.AttrString(expr, "name"); name != "" {
-				srcFiles = append(srcFiles, name+".cp.go")
+				if formatting, ok := this.config.Gofmt.CodegenRuleFormatting[kind]; ok {
+					filename := strings.ReplaceAll(formatting, "{{ name }}", name)
+					srcFiles = append(srcFiles, filename)
+				}
 			}
+		case "genrule":
+			outs := please.Attr(expr, "outs")
+			srcFiles = append(srcFiles, this.getSrcFilesFromExpr(outs, dir)...)
 		case "glob":
 			var include []string
 			var exclude []string
@@ -1011,7 +1024,7 @@ func getSrcFilesFromExpr(expr please.Expr, dir *Directory) []string {
 			}
 		case "filegroup":
 			srcs := please.Attr(expr, "srcs")
-			srcFiles = append(srcFiles, getSrcFilesFromExpr(srcs, dir)...)
+			srcFiles = append(srcFiles, this.getSrcFilesFromExpr(srcs, dir)...)
 		}
 	}
 
@@ -1143,15 +1156,14 @@ func (fc *fileConsumer) GetRule(files ...string) please.Rule {
 	return rule
 }
 
-func (fc *fileConsumer) Update(rule please.Rule) {
+func (fc *fileConsumer) Update(service *Service, rule please.Rule) {
 	delete(fc.Files, rule.Name())
 
 	for file, rules := range fc.Rules {
 		fc.Rules[file], _ = deleteStrings(rules, rule.Name())
 	}
 
-	files := getSrcFilesFromExpr(rule.Attr("srcs"), fc.Dir)
-
+	files := service.getSrcFilesFromExpr(rule.Attr("srcs"), fc.Dir)
 	for i := 0; i < len(files); i++ {
 		name := files[i]
 
@@ -1164,15 +1176,17 @@ func (fc *fileConsumer) Update(rule please.Rule) {
 		// Ignore please rule targets
 		default:
 			if _, ok := fc.Dir.Files[name]; !ok {
-				// This golang source file does not exist so it should be stripped
-				// from this rule's source list.
+				if _, ok := service.goFormat.genfiles[fc.Dir.Path + "/" + name]; !ok {
+					// This golang source file does not exist so it should be stripped
+					// from this rule's source list.
 
-				if i+1 < len(files) {
-					copy(files[i:], files[i+1:])
-				}
+					if i+1 < len(files) {
+						copy(files[i:], files[i+1:])
+					}
 
-				files = files[:len(files)-1]
-				i--
+					files = files[:len(files)-1]
+					i--
+				}
 			}
 		}
 	}
diff --git a/ports/wollemi/config.go b/ports/wollemi/config.go
index bce9462..74c3f62 100644
--- a/ports/wollemi/config.go
+++ b/ports/wollemi/config.go
@@ -26,6 +26,7 @@ type Gofmt struct {
 	Create  gofmtCreate `json:"create,omitempty"`
 	Manage  gofmtManage `json:"manage,omitempty"`
 	Mapped  gofmtMapped `json:"mapped,omitempty"`
+	CodegenRuleFormatting gofmtCodegenRuleFormatting `json:"codegen_rule_formatting,omitempty"`
 }
 
 func (gofmt *Gofmt) GetRewrite() bool {
@@ -106,6 +107,9 @@ func (this Config) Merge(that Config) Config {
 		merge.ExplicitSources = v
 	}
 
+	if v := that.Gofmt.CodegenRuleFormatting; v != nil {
+		merge.Gofmt.CodegenRuleFormatting = v
+	}
 	if v := that.Gofmt.Rewrite; v != nil {
 		merge.Gofmt.Rewrite = v
 	}
@@ -125,6 +129,25 @@ func (this Config) Merge(that Config) Config {
 	return merge
 }
 
+type gofmtCodegenRuleFormatting map[string]string
+func (mapped *gofmtCodegenRuleFormatting) UnmarshalJSON(buf []byte) error {
+	tmp := make(map[string]string)
+	err := json.Unmarshal(buf, &tmp)
+
+	if err != nil {
+		s, unquoteErr := strconv.Unquote(string(buf))
+		if unquoteErr == nil && s == "none" {
+			err = nil
+		}
+	}
+
+	*mapped = map[string]string{}
+	for k, v := range tmp {
+		(*mapped)[k] = v
+	}
+	return err
+}
+
 type gofmtCreate []string
 
 func (list *gofmtCreate) UnmarshalJSON(buf []byte) error {
