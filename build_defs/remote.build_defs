def github_file(name, repo, file, revision='master', out=None, hash=None, visibility=None, test_only=False):
    """Defines a rule to fetch a file from Github.

    This is just a convenience wrapper around remote_file but is somewhat clearer to write.

    Args:
      name (str): Name of the rule.
      repo (str): Repository to fetch from (e.g. thought-machine/please).
      file (str): File in the repo to fetch (e.g. src/parse/rules/misc_rules.py).
      revision (str): Git revision to fetch from. Defaults to most recent on master.
      out (str): Name of the output file
      hash (str): Hash of downloaded file. You should set 'revision' if you set this.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
    """
    if revision == 'master' and hash:
        log.warning('Your github_file rule fetches from master but is hash verified; this '
                    'is prone to breaking if upstream changes at any point.')
    return remote_file(
        name = name,
        url = 'https://' + join_path('raw.githubusercontent.com', repo, revision, file),
        out = out,
        hashes = [hash] if hash else None,
        visibility = visibility,
        test_only = test_only,
    )
