{{- /* ################### TOPLINE VARIABLES ################### */ -}}
{{ $file := .File }}
{{ $generatedFile := .GeneratedFile }}
{{- $apiImportPathRaw := $file.GoImportPath | toString | clean | dir -}}
{{- $apiImportPath := printf "%s/%s" (trimPrefix "\"" $apiImportPathRaw) "api" -}}
{{- $dummy := replaceImportPath $file.GoImportPath $apiImportPath -}}
{{- $pgvector := "github.com/pgvector/pgvector-go" -}}

{{- /* ################### HELPERS ################### */ -}}
{{- define "SanitizedFieldType" -}}
    {{- if .Enum -}}
		    int16
    {{- else -}}
		    {{- fieldType . -}}
    {{- end -}}
{{- end -}}

{{- define "ProtoFieldValue" -}}
    {{- $original := fieldType . -}}
    {{- if .Enum -}}int16(proto.{{- .GoName -}}){{- else -}}proto.{{- .GoName -}}{{- end -}}
{{- end -}}

{{- define "ModelFieldValue" -}}
    {{- $original := fieldType . -}}
		{{- if .Enum -}}
				{{- qualifiedGoIdent .Enum.GoIdent -}}(m.{{- .GoName -}})
		{{- else -}}
		    m.{{- .GoName -}}
		{{- end -}}
{{- end -}}

{{- define "Marshal" -}}
    {{- $marshal := "Marshal" -}}
    {{-  $fieldOpts := (getExt .Desc "malonaz.core.codegen.model.v1.field_opts") -}}
    {{- if $fieldOpts.AsJsonBytes -}}
		    {{- $marshal = "JSONMarshal" -}}
    {{- end -}}
    {{- if $fieldOpts.Nullable -}}
	 	    var {{ .GoName -}}Bytes []byte
	 	    if proto.{{ .GoName }} != nil {
		    var err error
			  {{ .GoName -}}Bytes, err = {{ fqn "github.com/malonaz/core/go/pbutil" $marshal }}(proto.{{ .GoName }})
			  if err != nil {
			 	return nil, {{ fqn "fmt" "Errorf" }}("marshaling {{ .GoName -}}: %w", err)
			  }
		    }
    {{ else }}
	      {{ .GoName -}}Bytes, err := {{ fqn "github.com/malonaz/core/go/pbutil" $marshal }}(proto.{{ .GoName }})
	      if err != nil {
	 		  return nil, {{ fqn "fmt" "Errorf" }}("marshaling {{ .GoName -}}: %w", err)
		    }
    {{ end }}
{{- end -}}

{{- define "Unmarshal" -}}
    {{- $marshal := "Unmarshal" -}}
    {{-  $fieldOpts := (getExt .Desc "malonaz.core.codegen.model.v1.field_opts") -}}
    {{- if $fieldOpts.AsJsonBytes -}}
		    {{- $marshal = "JSONUnmarshal" -}}
    {{- end -}}
    {{- if $fieldOpts.Nullable }}
	      var {{ .GoName }} *{{ qualifiedGoIdent .Message.GoIdent }}
	      if m.{{ .GoName }} != nil {
	 		  {{- .GoName -}} = &{{- qualifiedGoIdent .Message.GoIdent -}}{}
	 		  if err := {{ fqn "github.com/malonaz/core/go/pbutil" $marshal }}(m.{{ .GoName -}}, {{- .GoName -}}); err != nil {
	 			return nil, {{ fqn "fmt" "Errorf" }}("marshaling {{ .GoName -}}: %w", err)
	 		  }
	      }
    {{ else }}
	      {{- .GoName -}} := &{{- qualifiedGoIdent .Message.GoIdent -}}{}
	      if err := {{ fqn "github.com/malonaz/core/go/pbutil" $marshal }}(m.{{ .GoName -}}, {{- .GoName -}}); err != nil {
	 		  return nil, {{ fqn "fmt" "Errorf" }}("marshaling {{ .GoName -}}: %w", err)
	      }
    {{ end }}
{{- end -}}

// Code generated by protoc-templates. DO NOT EDIT.
// source: {{ $file.GoImportPath }}
package {{ $file.GoPackageName }}

{{/* ################### VAR COLUMNS ################### */}}
{{ range $message := $file.Messages -}}
    {{-  $modelOpts := (getExt .Desc "malonaz.core.codegen.model.v1.model_opts") -}}
    {{- if not $modelOpts.Generate -}}{{ continue }}{{- end -}}
    {{ "\n" }}
		var {{ $message.GoIdent.GoName }}Columns = {{ fqn "github.com/malonaz/core/go/postgres" "GetDBColumns" }}({{ $message.GoIdent.GoName }}{})
{{- end -}}


{{/* ################### TYPE DEFINITIONS ################### */}}
{{ "" }}
{{ range $message := $file.Messages -}}
    {{-  $modelOpts := (getExt .Desc "malonaz.core.codegen.model.v1.model_opts") -}}
    {{- if not $modelOpts.Generate -}}{{ continue }}{{- end -}}

		type {{ $message.GoIdent.GoName }} struct {
		{{- range $field := $message.Fields -}}
        {{-  $fieldOpts := (getExt .Desc "malonaz.core.codegen.model.v1.field_opts") -}}
				{{- if $fieldOpts.Skip }}{{- continue -}}{{- end }}
    		{{ if not $fieldOpts.Embed }}{{ $field.GoName -}}{{- " " -}}{{ end }}
				{{- if or $fieldOpts.AsJsonBytes $fieldOpts.AsProtoBytes -}}
						[]byte
				{{- else if $fieldOpts.PgVector -}}
      			{{- if $fieldOpts.Nullable }}*{{ end }}{{ fqn $pgvector "Vector" }}
				{{- else if $fieldOpts.Embed -}}
						{{ $message.GoIdent.GoName }}{{ $field.GoName }}
				{{- else -}}
    				{{- if $fieldOpts.Nullable -}}*{{- end -}}
						{{- template "SanitizedFieldType" $field -}}
				{{- end -}}
				{{ if not $fieldOpts.Embed }} `db:"{{- fieldName $field -}}"`{{ end }}
		{{- end }}
    }
{{ end -}}

{{- /* ################### FromPb Conversions ################### */ -}}
{{- range $message := $file.Messages -}}
    {{-  $modelOpts := (getExt .Desc "malonaz.core.codegen.model.v1.model_opts") -}}
		{{- if not $modelOpts.Generate -}}{{ continue }}{{- end }}
		{{- $messageStruct := qualifiedGoIdent $message.GoIdent }}

    func {{ $message.GoIdent.GoName }}FromPb(proto *{{- $messageStruct -}}) (*{{ $message.GoIdent.GoName }}, error) {
		{{ range $field := $message.Fields -}}
        {{-  $fieldOpts := (getExt .Desc "malonaz.core.codegen.model.v1.field_opts") -}}
		 		{{- if $fieldOpts.Skip }}{{- continue -}}{{- end -}}
				{{ if or $fieldOpts.AsJsonBytes $fieldOpts.AsProtoBytes -}}
					  {{ template "Marshal" $field }}
				{{- else if $fieldOpts.PgVector -}}
						{{ if $fieldOpts.Nullable }}
								var {{ $field.GoName }}Ptr *{{ fqn $pgvector "Vector" }}
								if proto.{{ $field.GoName }} != nil {
								{{ $field.GoName }} := pgvector_go.NewVector(proto.{{ $field.GoName }})
								{{ $field.GoName }}Ptr = &{{ $field.GoName }}
								}
						{{- end -}}
				{{ else if $fieldOpts.Embed }}
					  {{ $field.GoName }}, err := {{ $message.GoIdent.GoName }}{{ $field.GoName }}FromPb(proto.{{ $field.GoName }})
					  if err != nil {
					 	return nil, {{ fqn "fmt" "Errorf" }}("converting to model {{ $field.GoName }}: %w", err)
					  }
				{{ else }}
						{{ if $fieldOpts.Nullable }}
								var {{ $field.GoName }} *{{- template "SanitizedFieldType" $field }}
								if proto.{{ $field.GoName }} != {{ zeroValue $field }} {
                {{ if $field.Enum }}
                    {{ $field.GoName }}Int := int16(proto.{{ $field.GoName }})
                    {{ $field.GoName }} = &{{ $field.GoName }}Int
                {{- else -}}
							 		  {{ $field.GoName }} = &proto.{{ $field.GoName }}
                {{- end }}
								}
						{{- end -}}
				{{ end -}}
		{{- end }}
		return &{{ $message.GoIdent.GoName }}{
		{{- range $field := $message.Fields }}
        {{  $fieldOpts := (getExt .Desc "malonaz.core.codegen.model.v1.field_opts") -}}
		 		{{ if $fieldOpts.Skip }}{{ continue }}{{ end -}}
				{{ if $fieldOpts.Embed }}{{ $message.GoIdent.GoName }}{{ end }}
				{{- $field.GoName -}}{{- ": " -}}
				{{- if or $fieldOpts.AsJsonBytes $fieldOpts.AsProtoBytes -}}
					 	{{- $field.GoName -}}Bytes,
				{{- else if $fieldOpts.PgVector -}}
					 	{{- if $fieldOpts.Nullable }}
						 	 	{{- $field.GoName -}}Ptr,
						{{- else -}}
							 	proto.{{- $field.GoName -}},
						{{- end -}}
				{{- else if $fieldOpts.Embed -}}
					 	{{- $field.GoName -}},
				{{- else -}}
					 	{{- if $fieldOpts.Nullable }}
						 	 	{{- $field.GoName -}},
						{{- else -}}
						    {{- template "ProtoFieldValue" $field -}},
						{{- end -}}
				{{ end }}
		{{- end }}
		}, nil
    }
{{- end -}}


{{- /* ################### ToPb Conversions ################### */ -}}
{{- range $message := $file.Messages -}}
    {{-  $modelOpts := (getExt .Desc "malonaz.core.codegen.model.v1.model_opts") -}}
		{{- if not $modelOpts.Generate -}}{{ continue }}{{- end -}}
		{{- $messageStruct := qualifiedGoIdent $message.GoIdent }}

    func (m *{{ $message.GoIdent.GoName }}) ToPb() (*{{- $messageStruct -}}, error) {
		{{ range $field := $message.Fields -}}
        {{- $fieldOpts := (getExt .Desc "malonaz.core.codegen.model.v1.field_opts") -}}
		 		{{- if $fieldOpts.Skip }}{{- continue -}}{{- end -}}
				{{- if or $fieldOpts.AsJsonBytes $fieldOpts.AsProtoBytes -}}
					  {{ template "Unmarshal" $field }}
				{{- else if $fieldOpts.PgVector -}}
						{{ if $fieldOpts.Nullable }}
								var {{ $field.GoName }} {{ template "SanitizedFieldType" $field }}
								if m.{{ $field.GoName }} != nil {
							 	{{ $field.GoName }} = m.{{ $field.GoName }}.Slice()
								}
						{{- end -}}
				{{ else if $fieldOpts.Embed }}
					  {{ $field.GoName }}, err := m.{{ $message.GoIdent.GoName}}{{ $field.GoName }}.ToPb()
					  if err != nil {
					 	return nil, {{ fqn "fmt" "Errorf" }}("converting to pb {{ $field.GoName }}: %w", err)
					  }
				{{ else -}}
						{{- if $fieldOpts.Nullable }}
								var {{ $field.GoName }} {{ template "SanitizedFieldType" $field }}
								if m.{{ $field.GoName }} != nil {
							 	{{ $field.GoName }} = *m.{{ $field.GoName }}
								}
						{{- end }}
				{{ end -}}
		{{- end }}
		return &{{ $messageStruct }}{
		{{- range $field := $message.Fields }}
        {{ $fieldOpts := (getExt .Desc "malonaz.core.codegen.model.v1.field_opts") -}}
		 		{{ if $fieldOpts.Skip }}{{ continue }}{{ end -}}
				{{- $field.GoName -}}{{- ": " -}}
				{{- if or $fieldOpts.AsJsonBytes $fieldOpts.AsProtoBytes -}}
					 	{{- $field.GoName -}},
				{{- else if $fieldOpts.PgVector -}}
					 	{{- if $fieldOpts.Nullable }}
						 	 	{{- $field.GoName -}},
						{{- else -}}
						    m.{{- $field.GoName -}}.Slice(),
						{{- end -}}
				{{- else if $fieldOpts.Embed -}}
					 	{{- $field.GoName -}},
				{{- else -}}
					 	{{- if $fieldOpts.Nullable }}
                {{- if $field.Enum -}}
                    {{- qualifiedGoIdent $field.Enum.GoIdent -}}({{- $field.GoName -}}),
                {{- else -}}
						 	 		  {{- $field.GoName -}},
                {{- end -}}
						{{- else -}}
						    {{- template "ModelFieldValue" $field -}},
						{{- end -}}
				{{ end }}
		{{- end }}
		}, nil
    }
{{- end -}}
